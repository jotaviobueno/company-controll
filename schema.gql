# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PersonEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  username: String!
  email: String
  phone: String
  avatarUrl: String!
  roles: [RoleEntity!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CompanyEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  cnpj: String!
  corporateName: String!
  status: String!
  sector: String!
  addresses: [AddressEntity!]
}

type AddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  street: String!
  number: String!
  neighborhood: String!
  city: String!
  zipCode: Float!
  state: String!
}

type CompanyAddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonCompanyEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonRoleEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoleEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

type PersonAddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  unitPrice: Float!
  discountPercentage: Float
  imagesUrl: [String!]!
}

type CustomerEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  cpf: String
  email: String
}

type Query {
  whoAmI: PersonEntity!
  findAllPerson(PaginationOptionsInput: PaginationOptionsInput!): [PersonEntity!]!
  findOnePerson(personId: IdInput!): PersonEntity!
  findAllRoles(paginationOptionsInput: PaginationOptionsInput!): [RoleEntity!]!
  findOneRole(roleId: IdInput!): RoleEntity!
  findAllCompany(paginationOptionsInput: PaginationOptionsInput!): [CompanyEntity!]!
  findOneCompany(companyId: IdInput!): CompanyEntity!
  findAllPersonCompany(PaginationOptionsInput: PaginationOptionsInput!): [PersonCompanyEntity!]!
  findOnePersonCompany(personCompanyId: IdInput!): PersonCompanyEntity!
  findAllCompanyAddress(PaginationOptionsInput: PaginationOptionsInput!): [CompanyAddressEntity!]!
  findOneCompanyAddress(companyAddressId: IdInput!): CompanyAddressEntity!
  findAllPersonAddress(PaginationOptionsInput: PaginationOptionsInput!): [PersonAddressEntity!]!
  findOnePersonAddress(personAddressId: IdInput!): PersonAddressEntity!
  findAllProduct(PaginationOptionsInput: PaginationOptionsInput!): [ProductEntity!]!
  findOneProduct(productId: IdInput!): ProductEntity!
  findAllCustomer(PaginationOptionsInput: PaginationOptionsInput!): [CustomerEntity!]!
  findOneCustomer(customerId: IdInput!): CustomerEntity!
}

input PaginationOptionsInput {
  page: Int = 1
  per_page: Int = 10
}

input IdInput {
  id: String!
}

type Mutation {
  createAccess(createAccessInput: CreateAccessInput!): String!
  createAccessForDev: String!
  updatePerson(updatePersonInput: UpdatePersonInput!): PersonEntity!
  removePerson(personId: IdInput!): Boolean!
  assignPersonRole(personRoleInput: PersonRoleInput!): PersonRoleEntity!
  removePersonRole(personRoleInput: PersonRoleInput!): PersonRoleEntity!
  updateRole(updateRoleInput: UpdateRoleInput!): RoleEntity!
  createCompany(createCompanyInput: CreateCompanyInput!): CompanyEntity!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): CompanyEntity!
  removeCompany(companyId: IdInput!): Boolean!
  createCompanyAddress(companyId: IdInput!, createAddressInput: CreateAddressInput!): CompanyAddressEntity!
  updateCompanyAddress(companyId: IdInput!, updateAddressInput: CreateAddressInput!): CompanyAddressEntity!
  removeCompanyAddress(companyAddressId: IdInput!): Boolean!
  createPersonAddress(personId: IdInput!, createAddressInput: CreateAddressInput!): PersonAddressEntity!
  updatePersonAddress(companyId: IdInput!, updateAddressInput: CreateAddressInput!): PersonAddressEntity!
  removePersonAddress(personAddressId: IdInput!): PersonAddressEntity!
  createProduct(createProductInput: CreateProductInput!): ProductEntity!
  updateProduct(updateProductInput: UpdateProductInput!): ProductEntity!
  removeProduct(productId: IdInput!): ProductEntity!
  updateCustomer(updateCustomerInput: UpdateCustomerInput!): CustomerEntity!
  removeCustomer(customerId: IdInput!): CustomerEntity!
}

input CreateAccessInput {
  provider: AccessProvider!
  code: String!
}

enum AccessProvider {
  GOOGLE
  ACCESS_DEV
}

input UpdatePersonInput {
  name: String
  username: String
  email: String
  phone: String
  avatarUrl: String
  id: String!
}

input PersonRoleInput {
  personId: String!
  roleId: String!
}

input UpdateRoleInput {
  id: String!
  name: String
  descriptions: String
}

input CreateCompanyInput {
  cnpj: String!
  corporateName: String
  status: String
  sector: String
}

input UpdateCompanyInput {
  cnpj: String
  corporateName: String
  status: String
  sector: String
  id: String!
}

input CreateAddressInput {
  street: String!
  number: String!
  neighborhood: String!
  city: String!
  zipCode: Int!
  state: String!
}

input CreateProductInput {
  name: String!
  unitPrice: Int!
  discountPercentage: Int!
  imagesUrl: [String!]!
  companyId: String!
}

input UpdateProductInput {
  name: String
  unitPrice: Int
  discountPercentage: Int
  imagesUrl: [String!]
  id: String!
}

input UpdateCustomerInput {
  name: String
  cpf: String
  email: String
  companyId: String
  id: String!
}