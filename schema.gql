# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PersonEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  username: String!
  email: String
  phone: String
  avatarUrl: String!
  roles: [RoleEntity!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CompanyEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  cnpj: String!
  corporateName: String!
  status: String!
  sector: String!
  addresses: [AddressEntity!]
}

type AddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  street: String!
  number: String!
  neighborhood: String!
  city: String!
  zipCode: Float!
  state: String!
}

type CompanyAddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonCompanyEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonRoleEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoleEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

type PersonAddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  unitPrice: Float!
  discountPercentage: Float
  imagesUrl: [String!]!
}

type CustomerEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  cpf: String
  email: String
}

type CustomerCompanyEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StockEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: String!
  description: String
  provider: String
  quantity: Int!
}

type CustomerAddressEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InvoiceEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  operation: String
  description: String
  paymentType: String
  status: String
  quantity: Int
  unitPrice: Int
  totalAfterInstallment: Int
  totalInstallments: Int
  lastInstallment: Int
  discountPercentage: Int
  discountMoney: Int
  priceBeforeDiscount: Int
  finalPrice: Int!
  companies: [CompanyEntity!]
  customers: [CustomerEntity!]
  persons: [PersonEntity!]
  pricingGroups: [PricingGroupEntity!]
  products: [ProductEntity!]
  payment: [PaymentEntity!]
}

type FinanceEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  companies: [InvoiceEntity!]
}

type PaymentEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: String!
  statusDetail: String!
  operationType: String!
  paymentId: String!
  brand: String!
  method: String!
  cardFirstSixDigits: String
  cardLastFourDigits: String
  currency: String!
  fees: [JSON!]!
  amount: Int!
  installmentAmount: Int!
  totalPaidWithFees: Int!
  approvedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type PricingGroupEntity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Query {
  whoAmI: PersonEntity!
  findAllPerson(PaginationOptionsInput: PaginationOptionsInput!): [PersonEntity!]!
  findOnePerson(personId: IdInput!): PersonEntity!
  findAllRoles(paginationOptionsInput: PaginationOptionsInput!): [RoleEntity!]!
  findOneRole(roleId: IdInput!): RoleEntity!
  findAllCompany(paginationOptionsInput: PaginationOptionsInput!): [CompanyEntity!]!
  findOneCompany(companyId: IdInput!): CompanyEntity!
  findAllPersonCompany(PaginationOptionsInput: PaginationOptionsInput!): [PersonCompanyEntity!]!
  findOnePersonCompany(personCompanyId: IdInput!): PersonCompanyEntity!
  findAllCompanyAddress(PaginationOptionsInput: PaginationOptionsInput!): [CompanyAddressEntity!]!
  findOneCompanyAddress(companyAddressId: IdInput!): CompanyAddressEntity!
  findAllPersonAddress(PaginationOptionsInput: PaginationOptionsInput!): [PersonAddressEntity!]!
  findOnePersonAddress(personAddressId: IdInput!): PersonAddressEntity!
  findAllProduct(PaginationOptionsInput: PaginationOptionsInput!): [ProductEntity!]!
  findOneProduct(productId: IdInput!): ProductEntity!
  findAllCustomer(PaginationOptionsInput: PaginationOptionsInput!): [CustomerEntity!]!
  findOneCustomer(customerId: IdInput!): CustomerEntity!
  findAllCustomerAddress(paginationOptionsInput: PaginationOptionsInput!): [CustomerAddressEntity!]!
  findOneCustomerAddress(customerAddressId: IdInput!): CustomerAddressEntity!
  findAllInvoice(paginationOptionsInput: PaginationOptionsInput!): [InvoiceEntity!]!
  findOneInvoice(invoiceId: IdInput!): InvoiceEntity!
  findAllFinances(paginationOptionsInput: PaginationOptionsInput!): [FinanceEntity!]!
  findAllPricingGroup(PaginationOptionsInput: PaginationOptionsInput!): [PricingGroupEntity!]!
  findOnePricingGroup(pricingGroupId: IdInput!): PricingGroupEntity!
}

input PaginationOptionsInput {
  page: Int = 1
  per_page: Int = 10
}

input IdInput {
  id: String!
}

type Mutation {
  createAccess(createAccessInput: CreateAccessInput!): String!
  createAccessForDev: String!
  updatePerson(updatePersonInput: UpdatePersonInput!): PersonEntity!
  removePerson(personId: IdInput!): Boolean!
  assignPersonRole(personRoleInput: PersonRoleInput!): PersonRoleEntity!
  removePersonRole(personRoleInput: PersonRoleInput!): PersonRoleEntity!
  updateRole(updateRoleInput: UpdateRoleInput!): RoleEntity!
  createCompany(createCompanyInput: CreateCompanyInput!): CompanyEntity!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): CompanyEntity!
  removeCompany(companyId: IdInput!): Boolean!
  createCompanyAddress(companyId: IdInput!, createAddressInput: CreateAddressInput!): CompanyAddressEntity!
  updateCompanyAddress(companyId: IdInput!, updateAddressInput: CreateAddressInput!): CompanyAddressEntity!
  removeCompanyAddress(companyAddressId: IdInput!): Boolean!
  createPersonAddress(personId: IdInput!, createAddressInput: CreateAddressInput!): PersonAddressEntity!
  updatePersonAddress(companyId: IdInput!, updateAddressInput: CreateAddressInput!): PersonAddressEntity!
  removePersonAddress(personAddressId: IdInput!): PersonAddressEntity!
  createProduct(createProductInput: CreateProductInput!): ProductEntity!
  updateProduct(updateProductInput: UpdateProductInput!): ProductEntity!
  removeProduct(productId: IdInput!): ProductEntity!
  updateCustomer(updateCustomerInput: UpdateCustomerInput!): CustomerEntity!
  removeCustomer(customerId: IdInput!): CustomerEntity!
  createCustomerCompany(CustomerCompanyInput: CustomerCompanyInput!): CustomerCompanyEntity!
  removeCustomerCompany(customerCompanyId: IdInput!): CustomerCompanyEntity!
  createStock(createStockInput: CreateStockInput!): StockEntity!
  createCustomerAddress(createCustomerAddressInput: CreateAddressInput!, customerId: IdInput!): CustomerAddressEntity!
  updateCustomerAddress(updateCustomerAddressInput: UpdateCustomerAddressInput!): CustomerAddressEntity!
  removeCustomerAddress(customerAddressId: IdInput!): CustomerAddressEntity!
  createInvoice(createInvoiceInput: CreateInvoiceInput!): InvoiceEntity!
  createPricingGroup(createPricingGroupInput: CreatePricingGroupInput!): PricingGroupEntity!
  updatePricingGroup(updatePricingGroupInput: UpdatePricingGroupInput!): PricingGroupEntity!
  removePricingGroup(pricingGroupId: IdInput!): Boolean!
}

input CreateAccessInput {
  provider: AccessProvider!
  code: String!
}

enum AccessProvider {
  GOOGLE
  ACCESS_DEV
}

input UpdatePersonInput {
  name: String
  username: String
  email: String
  phone: String
  avatarUrl: String
  id: String!
}

input PersonRoleInput {
  personId: String!
  roleId: String!
}

input UpdateRoleInput {
  id: String!
  name: String
  descriptions: String
}

input CreateCompanyInput {
  cnpj: String!
  corporateName: String
  status: String
  sector: String
}

input UpdateCompanyInput {
  cnpj: String
  corporateName: String
  status: String
  sector: String
  id: String!
}

input CreateAddressInput {
  street: String!
  number: String!
  neighborhood: String!
  city: String!
  zipCode: Int!
  state: String!
}

input CreateProductInput {
  name: String!
  unitPrice: Int!
  discountPercentage: Int
  imagesUrl: [String!]!
  companyId: String!
}

input UpdateProductInput {
  name: String
  unitPrice: Int
  discountPercentage: Int
  imagesUrl: [String!]
  id: String!
}

input UpdateCustomerInput {
  name: String
  cpf: String
  email: String
  id: String!
}

input CustomerCompanyInput {
  companyId: String!
  customerId: String!
}

input CreateStockInput {
  type: StockTypeStatus!
  description: String
  provider: String
  quantity: Int!
  productId: String!
}

enum StockTypeStatus {
  INCOME
  OUTCOME
}

input UpdateCustomerAddressInput {
  street: String
  number: String
  neighborhood: String
  city: String
  zipCode: Int
  state: String
  id: String!
}

input CreateInvoiceInput {
  operation: String
  description: String
  paymentType: InvoicePaymentType!
  status: InvoiceStatusEnum
  quantity: Int
  unitPrice: Int
  totalAfterInstallment: Int
  totalInstallments: Int
  lastInstallment: Int
  discountPercentage: Int
  discountMoney: Int
  priceBeforeDiscount: Int
  finalPrice: Int!
  personsIds: [String!]
  customersIds: [String!]
  companiesIds: [String!]
  productsIds: [String!]
  pricingGroupsId: [String!]
}

enum InvoicePaymentType {
  INCOME
  OUTCOME
}

enum InvoiceStatusEnum {
  OPEN
  PAID
  CANCEL
  PENDING
}

input CreatePricingGroupInput {
  name: String!
}

input UpdatePricingGroupInput {
  name: String
  id: String!
}