// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Access {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  provider  AccessProvider
  token     String         @unique
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime       @default(now()) @map("updated_at") @db.Timestamp
  Person    Person?
}

enum AccessProvider {
  GOOGLE
  ACCESS_DEV
}

model Person {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String
  email         String?
  phone         String?
  avatarUrl     String          @map("avatar_url")
  access        Access          @relation(fields: [accessId], references: [id])
  accessId      String          @unique @map("access_id") @db.ObjectId
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp
  PersonCompany PersonCompany[]
  PersonRole    PersonRole[]
  PersonAddress PersonAddress[]
  Log           Log[]
  InvoicePerson InvoicePerson[]
}

model PersonCompany {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  person    Person   @relation(fields: [personId], references: [id])
  personId  String   @map("person_id") @db.ObjectId
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String   @map("company_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model Address {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  street          String
  number          String
  neighborhood    String
  city            String
  zipCode         Int               @map("zip_code")
  state           String
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  CompanyAddress  CompanyAddress[]
  PersonAddress   PersonAddress[]
  CustomerAddress CustomerAddress[]
  ProviderAddress ProviderAddress[]
}

model PersonRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  person    Person   @relation(fields: [personId], references: [id])
  personId  String   @map("person_id") @db.ObjectId
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String   @map("role_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model Company {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  cnpj            String
  corporateName   String            @map("corporate_name")
  status          String
  sector          String?
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  PersonCompany   PersonCompany[]
  CompanyAddress  CompanyAddress[]
  Product         Product[]
  CustomerCompany CustomerCompany[]
  CompanyProvider CompanyProvider[]
  InvoiceCompany  InvoiceCompany[]
}

// TODO: NÃO FEITO

model Category {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String             @unique
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp
  updatedAt        DateTime           @default(now()) @map("updated_at") @db.Timestamp
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamp
  ProviderCategory ProviderCategory[]
}

// TODO: NÃO FEITO

model ProviderCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId String   @map("provider_id") @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id") @db.ObjectId
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model Provider {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  cnpj             String?
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp
  updatedAt        DateTime           @default(now()) @map("updated_at") @db.Timestamp
  deletedAt        DateTime?          @map("deleted_at") @db.Timestamp
  ProviderCategory ProviderCategory[]
  CompanyProvider  CompanyProvider[]
  ProviderAddress  ProviderAddress[]
}

model CompanyProvider {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String    @map("company_id") @db.ObjectId
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String    @map("provider_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp
}

// TODO: NÃO FEITO
model ProviderAddress {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  address    Address   @relation(fields: [addressId], references: [id])
  addressId  String    @map("address_id") @db.ObjectId
  provider   Provider  @relation(fields: [providerId], references: [id])
  providerId String    @map("provider_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp
}

model CompanyAddress {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String    @map("company_id") @db.ObjectId
  address   Address   @relation(fields: [addressId], references: [id])
  addressId String    @map("address_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp
}

model PersonAddress {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  person    Person    @relation(fields: [personId], references: [id])
  personId  String    @map("person_id") @db.ObjectId
  address   Address   @relation(fields: [addressId], references: [id])
  addressId String    @map("address_id") @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp
}

model Role {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp
  PersonRole     PersonRole[]
  rolePermission RolePermission[]
}

model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id") @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String     @map("role_id") @db.ObjectId
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime   @default(now()) @map("updated_at") @db.Timestamp
}

model Permission {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime         @default(now()) @map("updated_at") @db.Timestamp
  RolePermission RolePermission[]
}

model Product {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  unitPrice          Int
  discountPercentage Int?             @map("discount_percentage")
  imagesUrl          String[]         @default([]) @map("images_url")
  company            Company          @relation(fields: [companyId], references: [id])
  companyId          String           @map("company_id") @db.ObjectId
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt          DateTime         @default(now()) @map("updated_at") @db.Timestamp
  deletedAt          DateTime?        @map("deleted_at") @db.Timestamp
  Stock              Stock[]
  InvoiceProduct     InvoiceProduct[]
}

model Stock {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  type        StockTypeStatus
  description String?
  provider    String?
  quantity    Int
  product     Product         @relation(fields: [productId], references: [id])
  productId   String          @map("product_id") @db.ObjectId
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime        @default(now()) @map("updated_at") @db.Timestamp
}

enum StockTypeStatus {
  INCOME
  OUTCOME
}

model CustomerCompany {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String    @map("company_id") @db.ObjectId
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId String    @map("customer_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp
}

model Customer {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  cpf             String?
  email           String?
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamp
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  CustomerCompany CustomerCompany[]
  CustomerAddress CustomerAddress[]
  InvoiceCustomer InvoiceCustomer[]
}

model CustomerAddress {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  address    Address   @relation(fields: [addressId], references: [id])
  addressId  String    @map("address_id") @db.ObjectId
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId String    @map("customer_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  modelName String?  @map("model_name") @db.String
  person    Person?  @relation(fields: [personId], references: [id])
  personId  String?  @map("person_id") @db.ObjectId
  action    String
  oldValue  Json?    @map("old_value")
  newValue  Json     @map("new_value")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model PaymentNotification {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  action            String?
  resource          String?
  topic             String?
  apiVersion        String?  @map("api_version")
  transferId        String?  @map("transfer_id")
  genericId         String?  @map("generic_id")
  paymentId         String?  @map("payment_id")
  mercadoPagoUserId String?  @map("mercado_pago_user_id")
  liveMode          Boolean? @map("live_mode")
  type              String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model Finance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?  @map("invoice_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model Payment {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  status             String
  statusDetail       String    @map("status_detail")
  operationType      String    @map("operation_type")
  paymentId          String    @map("payment_id")
  brand              String
  method             String
  cardFirstSixDigits String?   @map("card_first_six_digits")
  cardLastFourDigits String?   @map("card_last_four_digits")
  currency           String
  fees               Json[]    @default([])
  amount             Int       @map("amount")
  installmentAmount  Int       @map("installment_ammount")
  totalPaidWithFees  Int       @map("total_paid_with_fees")
  invoice            Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId          String    @map("invoice_id") @db.ObjectId
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt          DateTime  @default(now()) @map("updated_at") @db.Timestamp
  approvedAt         DateTime? @map("approved_at") @db.Timestamp
}

enum PaymentType {
  INCOME
  OUTCOME
}

enum FinanceStatus {
  OPEN
  PAID
  CANCEL
  PENDING
}

model InvoicePerson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  person    Person   @relation(fields: [personId], references: [id])
  personId  String   @map("person_id") @db.ObjectId
  invoiceId String   @map("invoice_id") @db.ObjectId
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model InvoiceCustomer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId  String   @map("invoice_id") @db.ObjectId
  Invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id") @db.ObjectId
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model InvoiceCompany {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId String   @map("invoice_id") @db.ObjectId
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String   @map("company_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model InvoiceProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId String   @map("invoice_id") @db.ObjectId
  Invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

model InvoicePricingGroup {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId      String       @map("invoice_id") @db.ObjectId
  Invoice        Invoice      @relation(fields: [invoiceId], references: [id])
  pricingGroup   PricingGroup @relation(fields: [pricingGroupId], references: [id])
  pricingGroupId String       @map("pricing_group_id") @db.ObjectId
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt      DateTime     @default(now()) @map("updated_at") @db.Timestamp
}

model Invoice {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  operation             String?
  description           String?
  paymentType           PaymentType           @map("payment_type")
  status                FinanceStatus?
  quantity              Int?
  unitPrice             Int?                  @map("unit_price")
  // 
  totalAfterInstallment Int?                  @map("total_after_installment")
  totalInstallments     Int?                  @map("total_installments")
  lastInstallment       Float?                @map("last_installment")
  // 
  discountPercentage    Int?                  @map("discount_percentage")
  discountMoney         Int?                  @map("discount_money")
  priceBeforeDiscount   Int?                  @map("price_before_discount")
  finalPrice            Int                   @map("final_price")
  //
  createdAt             DateTime              @default(now()) @map("created_at") @db.Timestamp
  updatedAt             DateTime              @default(now()) @map("updated_at") @db.Timestamp
  Finance               Finance[]
  Installment           Installment[]
  Payment               Payment[]
  InvoicePerson         InvoicePerson[]
  InvoiceCustomer       InvoiceCustomer[]
  InvoiceCompany        InvoiceCompany[]
  InvoicePricingGroup   InvoicePricingGroup[]
  InvoiceProduct        InvoiceProduct[]
}

model PricingGroup {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String                @unique
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp
  updatedAt           DateTime              @default(now()) @map("updated_at") @db.Timestamp
  deletedAt           DateTime?             @map("deleted_at") @db.Timestamp
  InvoicePricingGroup InvoicePricingGroup[]
}

model Installment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  status      FinanceStatus
  invoice     Invoice       @relation(fields: [invoiceId], references: [id])
  invoiceId   String        @map("invoice_id") @db.ObjectId
  value       Float
  issuedDate  DateTime      @default(now()) @map("issued_date") @db.Timestamp
  paymentDate DateTime?     @map("payment_date") @db.Timestamp
}
